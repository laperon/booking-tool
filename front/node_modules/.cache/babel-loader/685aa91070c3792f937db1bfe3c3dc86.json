{"ast":null,"code":"var _jsxFileName = \"/Users/igorzheglov/Sites/React/booking-tool/src/App.js\";\nimport * as React from 'react';\nimport BookingForm from './forms/BookingForm';\nexport default function App() {\n  const [location, setLocation] = React.useState('');\n  const [name, setName] = React.useState('');\n  const [purpose, setPurpose] = React.useState('');\n  const [days, setDays] = React.useState('');\n  const [vaccination, setVaccinations] = React.useState('');\n  useEffect(() => {\n    fetch(\"http://localhost:3000/list\").then(res => res.json()).then(result => {// setIsLoaded(true);\n      // setItems(result.items);\n    } // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    // (error) => {\n    //   setIsLoaded(true);\n    //   setError(error);\n    // }\n    );\n  }, []); // useEffect(() => {\n  //   fetch(\"http://127.0.0.1:3000/list\")\n  //     .then(res => res.json())\n  //     .then(\n  //       (result) => {\n  //         console.log(result)\n  //         // setIsLoaded(true);\n  //         // setItems(result.items);\n  //       }\n  //     ),\n  // }, []);\n\n  const handleChange = event => {\n    setName(event.target.value); // console.log(event.target);\n    // console.log(location);\n    // alert(1);\n    // setAge(event.target.value);\n  };\n\n  const sendRequest = event => {\n    console.log(location);\n    console.log(name);\n  };\n\n  const {\n    getRootProps,\n    getInputLabelProps,\n    getInputProps,\n    getListboxProps,\n    getOptionProps,\n    groupedOptions\n  } = useAutocomplete({\n    id: 'use-autocomplete-demo',\n    options: top100Films,\n    getOptionLabel: option => {\n      return option.title;\n    }\n  });\n  /**\n  Name and Surname * (text)\n  Location * (select)\n  Purpose of WFO * (business, personal)\n  How many days do you want to WFO * (1-5) \n  First day of WFO *(date)\n  Preferable Room / Zone (text)\n  I am fully vaccinated * (yes , no)\n  Additional wishes (specific equipment, room for 1 person etc.) ) (text)\n   */\n\n  return /*#__PURE__*/React.createElement(BookingForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  });\n} // Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\n\nconst top100Films = [{\n  title: 'The Shawshank Redemption',\n  year: 1994\n}, {\n  title: 'The Godfather',\n  year: 1972\n}, {\n  title: 'The Godfather: Part II',\n  year: 1974\n}, {\n  title: 'The Dark Knight',\n  year: 2008\n}, {\n  title: '12 Angry Men',\n  year: 1957\n}, {\n  title: \"Schindler's List\",\n  year: 1993\n}, {\n  title: 'Pulp Fiction',\n  year: 1994\n}];","map":{"version":3,"sources":["/Users/igorzheglov/Sites/React/booking-tool/src/App.js"],"names":["React","BookingForm","App","location","setLocation","useState","name","setName","purpose","setPurpose","days","setDays","vaccination","setVaccinations","useEffect","fetch","then","res","json","result","handleChange","event","target","value","sendRequest","console","log","getRootProps","getInputLabelProps","getInputProps","getListboxProps","getOptionProps","groupedOptions","useAutocomplete","id","options","top100Films","getOptionLabel","option","title","year"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AAIA,eAAe,SAASC,GAAT,GAAe;AAC5B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BJ,KAAK,CAACK,QAAN,CAAe,EAAf,CAAhC;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,KAAK,CAACK,QAAN,CAAe,EAAf,CAAxB;AACA,QAAM,CAACG,OAAD,EAAUC,UAAV,IAAwBT,KAAK,CAACK,QAAN,CAAe,EAAf,CAA9B;AACA,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBX,KAAK,CAACK,QAAN,CAAe,EAAf,CAAxB;AACA,QAAM,CAACO,WAAD,EAAcC,eAAd,IAAiCb,KAAK,CAACK,QAAN,CAAe,EAAf,CAAvC;AAGAS,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,KAAK,CAAC,4BAAD,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAGKG,MAAD,IAAY,CACV;AACA;AACD,KANL,CAOI;AACA;AACA;AACA;AACA;AACA;AACA;AAbJ;AAeD,GAhBQ,EAgBN,EAhBM,CAAT,CAR4B,CA0B5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,QAAMC,YAAY,GAAIC,KAAD,IAAW;AAC9Bd,IAAAA,OAAO,CAACc,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAP,CAD8B,CAE9B;AACA;AACA;AACA;AACD,GAND;;AAQA,QAAMC,WAAW,GAAIH,KAAD,IAAW;AAC7BI,IAAAA,OAAO,CAACC,GAAR,CAAYvB,QAAZ;AACAsB,IAAAA,OAAO,CAACC,GAAR,CAAYpB,IAAZ;AACD,GAHD;;AAKA,QAAM;AACJqB,IAAAA,YADI;AAEJC,IAAAA,kBAFI;AAGJC,IAAAA,aAHI;AAIJC,IAAAA,eAJI;AAKJC,IAAAA,cALI;AAMJC,IAAAA;AANI,MAOFC,eAAe,CAAC;AAClBC,IAAAA,EAAE,EAAE,uBADc;AAElBC,IAAAA,OAAO,EAAEC,WAFS;AAGlBC,IAAAA,cAAc,EAAGC,MAAD,IAAY;AAC1B,aAAOA,MAAM,CAACC,KAAd;AACD;AALiB,GAAD,CAPnB;AAeA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,sBACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAGD,C,CAED;;AACA,MAAMH,WAAW,GAAG,CAClB;AAAEG,EAAAA,KAAK,EAAE,0BAAT;AAAqCC,EAAAA,IAAI,EAAE;AAA3C,CADkB,EAElB;AAAED,EAAAA,KAAK,EAAE,eAAT;AAA0BC,EAAAA,IAAI,EAAE;AAAhC,CAFkB,EAGlB;AAAED,EAAAA,KAAK,EAAE,wBAAT;AAAmCC,EAAAA,IAAI,EAAE;AAAzC,CAHkB,EAIlB;AAAED,EAAAA,KAAK,EAAE,iBAAT;AAA4BC,EAAAA,IAAI,EAAE;AAAlC,CAJkB,EAKlB;AAAED,EAAAA,KAAK,EAAE,cAAT;AAAyBC,EAAAA,IAAI,EAAE;AAA/B,CALkB,EAMlB;AAAED,EAAAA,KAAK,EAAE,kBAAT;AAA6BC,EAAAA,IAAI,EAAE;AAAnC,CANkB,EAOlB;AAAED,EAAAA,KAAK,EAAE,cAAT;AAAyBC,EAAAA,IAAI,EAAE;AAA/B,CAPkB,CAApB","sourcesContent":["import * as React from 'react';\nimport BookingForm from './forms/BookingForm';\n\n\n\nexport default function App() {\n  const [location, setLocation] = React.useState('');\n  const [name, setName] = React.useState('');\n  const [purpose, setPurpose] = React.useState('');\n  const [days, setDays] = React.useState('');\n  const [vaccination, setVaccinations] = React.useState('');\n\n\n  useEffect(() => {\n    fetch(\"http://localhost:3000/list\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          // setIsLoaded(true);\n          // setItems(result.items);\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        // (error) => {\n        //   setIsLoaded(true);\n        //   setError(error);\n        // }\n      )\n  }, [])\n\n  // useEffect(() => {\n  //   fetch(\"http://127.0.0.1:3000/list\")\n  //     .then(res => res.json())\n  //     .then(\n  //       (result) => {\n  //         console.log(result)\n  //         // setIsLoaded(true);\n  //         // setItems(result.items);\n  //       }\n  //     ),\n  // }, []);\n\n\n  const handleChange = (event) => {\n    setName(event.target.value);\n    // console.log(event.target);\n    // console.log(location);\n    // alert(1);\n    // setAge(event.target.value);\n  };\n\n  const sendRequest = (event) => {\n    console.log(location);\n    console.log(name);\n  };\n\n  const {\n    getRootProps,\n    getInputLabelProps,\n    getInputProps,\n    getListboxProps,\n    getOptionProps,\n    groupedOptions,\n  } = useAutocomplete({\n    id: 'use-autocomplete-demo',\n    options: top100Films,\n    getOptionLabel: (option) => {\n      return option.title;\n    } ,\n  });\n\n  /**\n  Name and Surname * (text)\n  Location * (select)\n  Purpose of WFO * (business, personal)\n  How many days do you want to WFO * (1-5) \n  First day of WFO *(date)\n  Preferable Room / Zone (text)\n  I am fully vaccinated * (yes , no)\n  Additional wishes (specific equipment, room for 1 person etc.) ) (text)\n   */\n  return (\n    <BookingForm />\n  );\n}\n\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\nconst top100Films = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: 'The Godfather', year: 1972 },\n  { title: 'The Godfather: Part II', year: 1974 },\n  { title: 'The Dark Knight', year: 2008 },\n  { title: '12 Angry Men', year: 1957 },\n  { title: \"Schindler's List\", year: 1993 },\n  { title: 'Pulp Fiction', year: 1994 },\n];"]},"metadata":{},"sourceType":"module"}